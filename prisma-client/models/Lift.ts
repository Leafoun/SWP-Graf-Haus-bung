
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Lift` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Lift
 * 
 */
export type LiftModel = runtime.Types.Result.DefaultSelection<Prisma.$LiftPayload>

export type AggregateLift = {
  _count: LiftCountAggregateOutputType | null
  _avg: LiftAvgAggregateOutputType | null
  _sum: LiftSumAggregateOutputType | null
  _min: LiftMinAggregateOutputType | null
  _max: LiftMaxAggregateOutputType | null
}

export type LiftAvgAggregateOutputType = {
  currentFloor: number | null
}

export type LiftSumAggregateOutputType = {
  currentFloor: number | null
}

export type LiftMinAggregateOutputType = {
  id: string | null
  name: string | null
  currentFloor: number | null
  doorsOpen: boolean | null
  createdAt: Date | null
}

export type LiftMaxAggregateOutputType = {
  id: string | null
  name: string | null
  currentFloor: number | null
  doorsOpen: boolean | null
  createdAt: Date | null
}

export type LiftCountAggregateOutputType = {
  id: number
  name: number
  currentFloor: number
  doorsOpen: number
  createdAt: number
  _all: number
}


export type LiftAvgAggregateInputType = {
  currentFloor?: true
}

export type LiftSumAggregateInputType = {
  currentFloor?: true
}

export type LiftMinAggregateInputType = {
  id?: true
  name?: true
  currentFloor?: true
  doorsOpen?: true
  createdAt?: true
}

export type LiftMaxAggregateInputType = {
  id?: true
  name?: true
  currentFloor?: true
  doorsOpen?: true
  createdAt?: true
}

export type LiftCountAggregateInputType = {
  id?: true
  name?: true
  currentFloor?: true
  doorsOpen?: true
  createdAt?: true
  _all?: true
}

export type LiftAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Lift to aggregate.
   */
  where?: Prisma.LiftWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lifts to fetch.
   */
  orderBy?: Prisma.LiftOrderByWithRelationInput | Prisma.LiftOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LiftWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lifts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lifts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Lifts
  **/
  _count?: true | LiftCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LiftAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LiftSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LiftMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LiftMaxAggregateInputType
}

export type GetLiftAggregateType<T extends LiftAggregateArgs> = {
      [P in keyof T & keyof AggregateLift]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLift[P]>
    : Prisma.GetScalarType<T[P], AggregateLift[P]>
}




export type LiftGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LiftWhereInput
  orderBy?: Prisma.LiftOrderByWithAggregationInput | Prisma.LiftOrderByWithAggregationInput[]
  by: Prisma.LiftScalarFieldEnum[] | Prisma.LiftScalarFieldEnum
  having?: Prisma.LiftScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LiftCountAggregateInputType | true
  _avg?: LiftAvgAggregateInputType
  _sum?: LiftSumAggregateInputType
  _min?: LiftMinAggregateInputType
  _max?: LiftMaxAggregateInputType
}

export type LiftGroupByOutputType = {
  id: string
  name: string
  currentFloor: number
  doorsOpen: boolean
  createdAt: Date
  _count: LiftCountAggregateOutputType | null
  _avg: LiftAvgAggregateOutputType | null
  _sum: LiftSumAggregateOutputType | null
  _min: LiftMinAggregateOutputType | null
  _max: LiftMaxAggregateOutputType | null
}

type GetLiftGroupByPayload<T extends LiftGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LiftGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LiftGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LiftGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LiftGroupByOutputType[P]>
      }
    >
  >



export type LiftWhereInput = {
  AND?: Prisma.LiftWhereInput | Prisma.LiftWhereInput[]
  OR?: Prisma.LiftWhereInput[]
  NOT?: Prisma.LiftWhereInput | Prisma.LiftWhereInput[]
  id?: Prisma.StringFilter<"Lift"> | string
  name?: Prisma.StringFilter<"Lift"> | string
  currentFloor?: Prisma.IntFilter<"Lift"> | number
  doorsOpen?: Prisma.BoolFilter<"Lift"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Lift"> | Date | string
  internalRequests?: Prisma.InternalRequestListRelationFilter
  externalCalls?: Prisma.ExternalCallListRelationFilter
}

export type LiftOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currentFloor?: Prisma.SortOrder
  doorsOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  internalRequests?: Prisma.InternalRequestOrderByRelationAggregateInput
  externalCalls?: Prisma.ExternalCallOrderByRelationAggregateInput
}

export type LiftWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LiftWhereInput | Prisma.LiftWhereInput[]
  OR?: Prisma.LiftWhereInput[]
  NOT?: Prisma.LiftWhereInput | Prisma.LiftWhereInput[]
  name?: Prisma.StringFilter<"Lift"> | string
  currentFloor?: Prisma.IntFilter<"Lift"> | number
  doorsOpen?: Prisma.BoolFilter<"Lift"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Lift"> | Date | string
  internalRequests?: Prisma.InternalRequestListRelationFilter
  externalCalls?: Prisma.ExternalCallListRelationFilter
}, "id">

export type LiftOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currentFloor?: Prisma.SortOrder
  doorsOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.LiftCountOrderByAggregateInput
  _avg?: Prisma.LiftAvgOrderByAggregateInput
  _max?: Prisma.LiftMaxOrderByAggregateInput
  _min?: Prisma.LiftMinOrderByAggregateInput
  _sum?: Prisma.LiftSumOrderByAggregateInput
}

export type LiftScalarWhereWithAggregatesInput = {
  AND?: Prisma.LiftScalarWhereWithAggregatesInput | Prisma.LiftScalarWhereWithAggregatesInput[]
  OR?: Prisma.LiftScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LiftScalarWhereWithAggregatesInput | Prisma.LiftScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Lift"> | string
  name?: Prisma.StringWithAggregatesFilter<"Lift"> | string
  currentFloor?: Prisma.IntWithAggregatesFilter<"Lift"> | number
  doorsOpen?: Prisma.BoolWithAggregatesFilter<"Lift"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Lift"> | Date | string
}

export type LiftCreateInput = {
  id?: string
  name: string
  currentFloor: number
  doorsOpen?: boolean
  createdAt?: Date | string
  internalRequests?: Prisma.InternalRequestCreateNestedManyWithoutLiftInput
  externalCalls?: Prisma.ExternalCallCreateNestedManyWithoutLiftInput
}

export type LiftUncheckedCreateInput = {
  id?: string
  name: string
  currentFloor: number
  doorsOpen?: boolean
  createdAt?: Date | string
  internalRequests?: Prisma.InternalRequestUncheckedCreateNestedManyWithoutLiftInput
  externalCalls?: Prisma.ExternalCallUncheckedCreateNestedManyWithoutLiftInput
}

export type LiftUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currentFloor?: Prisma.IntFieldUpdateOperationsInput | number
  doorsOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  internalRequests?: Prisma.InternalRequestUpdateManyWithoutLiftNestedInput
  externalCalls?: Prisma.ExternalCallUpdateManyWithoutLiftNestedInput
}

export type LiftUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currentFloor?: Prisma.IntFieldUpdateOperationsInput | number
  doorsOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  internalRequests?: Prisma.InternalRequestUncheckedUpdateManyWithoutLiftNestedInput
  externalCalls?: Prisma.ExternalCallUncheckedUpdateManyWithoutLiftNestedInput
}

export type LiftCreateManyInput = {
  id?: string
  name: string
  currentFloor: number
  doorsOpen?: boolean
  createdAt?: Date | string
}

export type LiftUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currentFloor?: Prisma.IntFieldUpdateOperationsInput | number
  doorsOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LiftUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currentFloor?: Prisma.IntFieldUpdateOperationsInput | number
  doorsOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LiftCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currentFloor?: Prisma.SortOrder
  doorsOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type LiftAvgOrderByAggregateInput = {
  currentFloor?: Prisma.SortOrder
}

export type LiftMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currentFloor?: Prisma.SortOrder
  doorsOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type LiftMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currentFloor?: Prisma.SortOrder
  doorsOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type LiftSumOrderByAggregateInput = {
  currentFloor?: Prisma.SortOrder
}

export type LiftNullableScalarRelationFilter = {
  is?: Prisma.LiftWhereInput | null
  isNot?: Prisma.LiftWhereInput | null
}

export type LiftScalarRelationFilter = {
  is?: Prisma.LiftWhereInput
  isNot?: Prisma.LiftWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type LiftCreateNestedOneWithoutExternalCallsInput = {
  create?: Prisma.XOR<Prisma.LiftCreateWithoutExternalCallsInput, Prisma.LiftUncheckedCreateWithoutExternalCallsInput>
  connectOrCreate?: Prisma.LiftCreateOrConnectWithoutExternalCallsInput
  connect?: Prisma.LiftWhereUniqueInput
}

export type LiftUpdateOneWithoutExternalCallsNestedInput = {
  create?: Prisma.XOR<Prisma.LiftCreateWithoutExternalCallsInput, Prisma.LiftUncheckedCreateWithoutExternalCallsInput>
  connectOrCreate?: Prisma.LiftCreateOrConnectWithoutExternalCallsInput
  upsert?: Prisma.LiftUpsertWithoutExternalCallsInput
  disconnect?: Prisma.LiftWhereInput | boolean
  delete?: Prisma.LiftWhereInput | boolean
  connect?: Prisma.LiftWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LiftUpdateToOneWithWhereWithoutExternalCallsInput, Prisma.LiftUpdateWithoutExternalCallsInput>, Prisma.LiftUncheckedUpdateWithoutExternalCallsInput>
}

export type LiftCreateNestedOneWithoutInternalRequestsInput = {
  create?: Prisma.XOR<Prisma.LiftCreateWithoutInternalRequestsInput, Prisma.LiftUncheckedCreateWithoutInternalRequestsInput>
  connectOrCreate?: Prisma.LiftCreateOrConnectWithoutInternalRequestsInput
  connect?: Prisma.LiftWhereUniqueInput
}

export type LiftUpdateOneRequiredWithoutInternalRequestsNestedInput = {
  create?: Prisma.XOR<Prisma.LiftCreateWithoutInternalRequestsInput, Prisma.LiftUncheckedCreateWithoutInternalRequestsInput>
  connectOrCreate?: Prisma.LiftCreateOrConnectWithoutInternalRequestsInput
  upsert?: Prisma.LiftUpsertWithoutInternalRequestsInput
  connect?: Prisma.LiftWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LiftUpdateToOneWithWhereWithoutInternalRequestsInput, Prisma.LiftUpdateWithoutInternalRequestsInput>, Prisma.LiftUncheckedUpdateWithoutInternalRequestsInput>
}

export type LiftCreateWithoutExternalCallsInput = {
  id?: string
  name: string
  currentFloor: number
  doorsOpen?: boolean
  createdAt?: Date | string
  internalRequests?: Prisma.InternalRequestCreateNestedManyWithoutLiftInput
}

export type LiftUncheckedCreateWithoutExternalCallsInput = {
  id?: string
  name: string
  currentFloor: number
  doorsOpen?: boolean
  createdAt?: Date | string
  internalRequests?: Prisma.InternalRequestUncheckedCreateNestedManyWithoutLiftInput
}

export type LiftCreateOrConnectWithoutExternalCallsInput = {
  where: Prisma.LiftWhereUniqueInput
  create: Prisma.XOR<Prisma.LiftCreateWithoutExternalCallsInput, Prisma.LiftUncheckedCreateWithoutExternalCallsInput>
}

export type LiftUpsertWithoutExternalCallsInput = {
  update: Prisma.XOR<Prisma.LiftUpdateWithoutExternalCallsInput, Prisma.LiftUncheckedUpdateWithoutExternalCallsInput>
  create: Prisma.XOR<Prisma.LiftCreateWithoutExternalCallsInput, Prisma.LiftUncheckedCreateWithoutExternalCallsInput>
  where?: Prisma.LiftWhereInput
}

export type LiftUpdateToOneWithWhereWithoutExternalCallsInput = {
  where?: Prisma.LiftWhereInput
  data: Prisma.XOR<Prisma.LiftUpdateWithoutExternalCallsInput, Prisma.LiftUncheckedUpdateWithoutExternalCallsInput>
}

export type LiftUpdateWithoutExternalCallsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currentFloor?: Prisma.IntFieldUpdateOperationsInput | number
  doorsOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  internalRequests?: Prisma.InternalRequestUpdateManyWithoutLiftNestedInput
}

export type LiftUncheckedUpdateWithoutExternalCallsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currentFloor?: Prisma.IntFieldUpdateOperationsInput | number
  doorsOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  internalRequests?: Prisma.InternalRequestUncheckedUpdateManyWithoutLiftNestedInput
}

export type LiftCreateWithoutInternalRequestsInput = {
  id?: string
  name: string
  currentFloor: number
  doorsOpen?: boolean
  createdAt?: Date | string
  externalCalls?: Prisma.ExternalCallCreateNestedManyWithoutLiftInput
}

export type LiftUncheckedCreateWithoutInternalRequestsInput = {
  id?: string
  name: string
  currentFloor: number
  doorsOpen?: boolean
  createdAt?: Date | string
  externalCalls?: Prisma.ExternalCallUncheckedCreateNestedManyWithoutLiftInput
}

export type LiftCreateOrConnectWithoutInternalRequestsInput = {
  where: Prisma.LiftWhereUniqueInput
  create: Prisma.XOR<Prisma.LiftCreateWithoutInternalRequestsInput, Prisma.LiftUncheckedCreateWithoutInternalRequestsInput>
}

export type LiftUpsertWithoutInternalRequestsInput = {
  update: Prisma.XOR<Prisma.LiftUpdateWithoutInternalRequestsInput, Prisma.LiftUncheckedUpdateWithoutInternalRequestsInput>
  create: Prisma.XOR<Prisma.LiftCreateWithoutInternalRequestsInput, Prisma.LiftUncheckedCreateWithoutInternalRequestsInput>
  where?: Prisma.LiftWhereInput
}

export type LiftUpdateToOneWithWhereWithoutInternalRequestsInput = {
  where?: Prisma.LiftWhereInput
  data: Prisma.XOR<Prisma.LiftUpdateWithoutInternalRequestsInput, Prisma.LiftUncheckedUpdateWithoutInternalRequestsInput>
}

export type LiftUpdateWithoutInternalRequestsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currentFloor?: Prisma.IntFieldUpdateOperationsInput | number
  doorsOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  externalCalls?: Prisma.ExternalCallUpdateManyWithoutLiftNestedInput
}

export type LiftUncheckedUpdateWithoutInternalRequestsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currentFloor?: Prisma.IntFieldUpdateOperationsInput | number
  doorsOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  externalCalls?: Prisma.ExternalCallUncheckedUpdateManyWithoutLiftNestedInput
}


/**
 * Count Type LiftCountOutputType
 */

export type LiftCountOutputType = {
  internalRequests: number
  externalCalls: number
}

export type LiftCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  internalRequests?: boolean | LiftCountOutputTypeCountInternalRequestsArgs
  externalCalls?: boolean | LiftCountOutputTypeCountExternalCallsArgs
}

/**
 * LiftCountOutputType without action
 */
export type LiftCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LiftCountOutputType
   */
  select?: Prisma.LiftCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LiftCountOutputType without action
 */
export type LiftCountOutputTypeCountInternalRequestsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InternalRequestWhereInput
}

/**
 * LiftCountOutputType without action
 */
export type LiftCountOutputTypeCountExternalCallsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExternalCallWhereInput
}


export type LiftSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  currentFloor?: boolean
  doorsOpen?: boolean
  createdAt?: boolean
  internalRequests?: boolean | Prisma.Lift$internalRequestsArgs<ExtArgs>
  externalCalls?: boolean | Prisma.Lift$externalCallsArgs<ExtArgs>
  _count?: boolean | Prisma.LiftCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lift"]>

export type LiftSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  currentFloor?: boolean
  doorsOpen?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["lift"]>

export type LiftSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  currentFloor?: boolean
  doorsOpen?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["lift"]>

export type LiftSelectScalar = {
  id?: boolean
  name?: boolean
  currentFloor?: boolean
  doorsOpen?: boolean
  createdAt?: boolean
}

export type LiftOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "currentFloor" | "doorsOpen" | "createdAt", ExtArgs["result"]["lift"]>
export type LiftInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  internalRequests?: boolean | Prisma.Lift$internalRequestsArgs<ExtArgs>
  externalCalls?: boolean | Prisma.Lift$externalCallsArgs<ExtArgs>
  _count?: boolean | Prisma.LiftCountOutputTypeDefaultArgs<ExtArgs>
}
export type LiftIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type LiftIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $LiftPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Lift"
  objects: {
    internalRequests: Prisma.$InternalRequestPayload<ExtArgs>[]
    externalCalls: Prisma.$ExternalCallPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    currentFloor: number
    doorsOpen: boolean
    createdAt: Date
  }, ExtArgs["result"]["lift"]>
  composites: {}
}

export type LiftGetPayload<S extends boolean | null | undefined | LiftDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LiftPayload, S>

export type LiftCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LiftFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LiftCountAggregateInputType | true
  }

export interface LiftDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lift'], meta: { name: 'Lift' } }
  /**
   * Find zero or one Lift that matches the filter.
   * @param {LiftFindUniqueArgs} args - Arguments to find a Lift
   * @example
   * // Get one Lift
   * const lift = await prisma.lift.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LiftFindUniqueArgs>(args: Prisma.SelectSubset<T, LiftFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LiftClient<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Lift that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LiftFindUniqueOrThrowArgs} args - Arguments to find a Lift
   * @example
   * // Get one Lift
   * const lift = await prisma.lift.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LiftFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LiftFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LiftClient<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lift that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiftFindFirstArgs} args - Arguments to find a Lift
   * @example
   * // Get one Lift
   * const lift = await prisma.lift.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LiftFindFirstArgs>(args?: Prisma.SelectSubset<T, LiftFindFirstArgs<ExtArgs>>): Prisma.Prisma__LiftClient<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lift that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiftFindFirstOrThrowArgs} args - Arguments to find a Lift
   * @example
   * // Get one Lift
   * const lift = await prisma.lift.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LiftFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LiftFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LiftClient<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Lifts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiftFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Lifts
   * const lifts = await prisma.lift.findMany()
   * 
   * // Get first 10 Lifts
   * const lifts = await prisma.lift.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const liftWithIdOnly = await prisma.lift.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LiftFindManyArgs>(args?: Prisma.SelectSubset<T, LiftFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Lift.
   * @param {LiftCreateArgs} args - Arguments to create a Lift.
   * @example
   * // Create one Lift
   * const Lift = await prisma.lift.create({
   *   data: {
   *     // ... data to create a Lift
   *   }
   * })
   * 
   */
  create<T extends LiftCreateArgs>(args: Prisma.SelectSubset<T, LiftCreateArgs<ExtArgs>>): Prisma.Prisma__LiftClient<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Lifts.
   * @param {LiftCreateManyArgs} args - Arguments to create many Lifts.
   * @example
   * // Create many Lifts
   * const lift = await prisma.lift.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LiftCreateManyArgs>(args?: Prisma.SelectSubset<T, LiftCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Lifts and returns the data saved in the database.
   * @param {LiftCreateManyAndReturnArgs} args - Arguments to create many Lifts.
   * @example
   * // Create many Lifts
   * const lift = await prisma.lift.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Lifts and only return the `id`
   * const liftWithIdOnly = await prisma.lift.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LiftCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LiftCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Lift.
   * @param {LiftDeleteArgs} args - Arguments to delete one Lift.
   * @example
   * // Delete one Lift
   * const Lift = await prisma.lift.delete({
   *   where: {
   *     // ... filter to delete one Lift
   *   }
   * })
   * 
   */
  delete<T extends LiftDeleteArgs>(args: Prisma.SelectSubset<T, LiftDeleteArgs<ExtArgs>>): Prisma.Prisma__LiftClient<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Lift.
   * @param {LiftUpdateArgs} args - Arguments to update one Lift.
   * @example
   * // Update one Lift
   * const lift = await prisma.lift.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LiftUpdateArgs>(args: Prisma.SelectSubset<T, LiftUpdateArgs<ExtArgs>>): Prisma.Prisma__LiftClient<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Lifts.
   * @param {LiftDeleteManyArgs} args - Arguments to filter Lifts to delete.
   * @example
   * // Delete a few Lifts
   * const { count } = await prisma.lift.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LiftDeleteManyArgs>(args?: Prisma.SelectSubset<T, LiftDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Lifts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiftUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Lifts
   * const lift = await prisma.lift.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LiftUpdateManyArgs>(args: Prisma.SelectSubset<T, LiftUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Lifts and returns the data updated in the database.
   * @param {LiftUpdateManyAndReturnArgs} args - Arguments to update many Lifts.
   * @example
   * // Update many Lifts
   * const lift = await prisma.lift.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Lifts and only return the `id`
   * const liftWithIdOnly = await prisma.lift.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LiftUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LiftUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Lift.
   * @param {LiftUpsertArgs} args - Arguments to update or create a Lift.
   * @example
   * // Update or create a Lift
   * const lift = await prisma.lift.upsert({
   *   create: {
   *     // ... data to create a Lift
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Lift we want to update
   *   }
   * })
   */
  upsert<T extends LiftUpsertArgs>(args: Prisma.SelectSubset<T, LiftUpsertArgs<ExtArgs>>): Prisma.Prisma__LiftClient<runtime.Types.Result.GetResult<Prisma.$LiftPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Lifts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiftCountArgs} args - Arguments to filter Lifts to count.
   * @example
   * // Count the number of Lifts
   * const count = await prisma.lift.count({
   *   where: {
   *     // ... the filter for the Lifts we want to count
   *   }
   * })
  **/
  count<T extends LiftCountArgs>(
    args?: Prisma.Subset<T, LiftCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LiftCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Lift.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LiftAggregateArgs>(args: Prisma.Subset<T, LiftAggregateArgs>): Prisma.PrismaPromise<GetLiftAggregateType<T>>

  /**
   * Group by Lift.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LiftGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LiftGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LiftGroupByArgs['orderBy'] }
      : { orderBy?: LiftGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LiftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLiftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Lift model
 */
readonly fields: LiftFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Lift.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LiftClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  internalRequests<T extends Prisma.Lift$internalRequestsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Lift$internalRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InternalRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  externalCalls<T extends Prisma.Lift$externalCallsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Lift$externalCallsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExternalCallPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Lift model
 */
export interface LiftFieldRefs {
  readonly id: Prisma.FieldRef<"Lift", 'String'>
  readonly name: Prisma.FieldRef<"Lift", 'String'>
  readonly currentFloor: Prisma.FieldRef<"Lift", 'Int'>
  readonly doorsOpen: Prisma.FieldRef<"Lift", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Lift", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Lift findUnique
 */
export type LiftFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
  /**
   * Filter, which Lift to fetch.
   */
  where: Prisma.LiftWhereUniqueInput
}

/**
 * Lift findUniqueOrThrow
 */
export type LiftFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
  /**
   * Filter, which Lift to fetch.
   */
  where: Prisma.LiftWhereUniqueInput
}

/**
 * Lift findFirst
 */
export type LiftFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
  /**
   * Filter, which Lift to fetch.
   */
  where?: Prisma.LiftWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lifts to fetch.
   */
  orderBy?: Prisma.LiftOrderByWithRelationInput | Prisma.LiftOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Lifts.
   */
  cursor?: Prisma.LiftWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lifts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lifts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Lifts.
   */
  distinct?: Prisma.LiftScalarFieldEnum | Prisma.LiftScalarFieldEnum[]
}

/**
 * Lift findFirstOrThrow
 */
export type LiftFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
  /**
   * Filter, which Lift to fetch.
   */
  where?: Prisma.LiftWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lifts to fetch.
   */
  orderBy?: Prisma.LiftOrderByWithRelationInput | Prisma.LiftOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Lifts.
   */
  cursor?: Prisma.LiftWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lifts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lifts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Lifts.
   */
  distinct?: Prisma.LiftScalarFieldEnum | Prisma.LiftScalarFieldEnum[]
}

/**
 * Lift findMany
 */
export type LiftFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
  /**
   * Filter, which Lifts to fetch.
   */
  where?: Prisma.LiftWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lifts to fetch.
   */
  orderBy?: Prisma.LiftOrderByWithRelationInput | Prisma.LiftOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Lifts.
   */
  cursor?: Prisma.LiftWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lifts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lifts.
   */
  skip?: number
  distinct?: Prisma.LiftScalarFieldEnum | Prisma.LiftScalarFieldEnum[]
}

/**
 * Lift create
 */
export type LiftCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
  /**
   * The data needed to create a Lift.
   */
  data: Prisma.XOR<Prisma.LiftCreateInput, Prisma.LiftUncheckedCreateInput>
}

/**
 * Lift createMany
 */
export type LiftCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Lifts.
   */
  data: Prisma.LiftCreateManyInput | Prisma.LiftCreateManyInput[]
}

/**
 * Lift createManyAndReturn
 */
export type LiftCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * The data used to create many Lifts.
   */
  data: Prisma.LiftCreateManyInput | Prisma.LiftCreateManyInput[]
}

/**
 * Lift update
 */
export type LiftUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
  /**
   * The data needed to update a Lift.
   */
  data: Prisma.XOR<Prisma.LiftUpdateInput, Prisma.LiftUncheckedUpdateInput>
  /**
   * Choose, which Lift to update.
   */
  where: Prisma.LiftWhereUniqueInput
}

/**
 * Lift updateMany
 */
export type LiftUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Lifts.
   */
  data: Prisma.XOR<Prisma.LiftUpdateManyMutationInput, Prisma.LiftUncheckedUpdateManyInput>
  /**
   * Filter which Lifts to update
   */
  where?: Prisma.LiftWhereInput
  /**
   * Limit how many Lifts to update.
   */
  limit?: number
}

/**
 * Lift updateManyAndReturn
 */
export type LiftUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * The data used to update Lifts.
   */
  data: Prisma.XOR<Prisma.LiftUpdateManyMutationInput, Prisma.LiftUncheckedUpdateManyInput>
  /**
   * Filter which Lifts to update
   */
  where?: Prisma.LiftWhereInput
  /**
   * Limit how many Lifts to update.
   */
  limit?: number
}

/**
 * Lift upsert
 */
export type LiftUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
  /**
   * The filter to search for the Lift to update in case it exists.
   */
  where: Prisma.LiftWhereUniqueInput
  /**
   * In case the Lift found by the `where` argument doesn't exist, create a new Lift with this data.
   */
  create: Prisma.XOR<Prisma.LiftCreateInput, Prisma.LiftUncheckedCreateInput>
  /**
   * In case the Lift was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LiftUpdateInput, Prisma.LiftUncheckedUpdateInput>
}

/**
 * Lift delete
 */
export type LiftDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
  /**
   * Filter which Lift to delete.
   */
  where: Prisma.LiftWhereUniqueInput
}

/**
 * Lift deleteMany
 */
export type LiftDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Lifts to delete
   */
  where?: Prisma.LiftWhereInput
  /**
   * Limit how many Lifts to delete.
   */
  limit?: number
}

/**
 * Lift.internalRequests
 */
export type Lift$internalRequestsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InternalRequest
   */
  select?: Prisma.InternalRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InternalRequest
   */
  omit?: Prisma.InternalRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InternalRequestInclude<ExtArgs> | null
  where?: Prisma.InternalRequestWhereInput
  orderBy?: Prisma.InternalRequestOrderByWithRelationInput | Prisma.InternalRequestOrderByWithRelationInput[]
  cursor?: Prisma.InternalRequestWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InternalRequestScalarFieldEnum | Prisma.InternalRequestScalarFieldEnum[]
}

/**
 * Lift.externalCalls
 */
export type Lift$externalCallsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExternalCall
   */
  select?: Prisma.ExternalCallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExternalCall
   */
  omit?: Prisma.ExternalCallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExternalCallInclude<ExtArgs> | null
  where?: Prisma.ExternalCallWhereInput
  orderBy?: Prisma.ExternalCallOrderByWithRelationInput | Prisma.ExternalCallOrderByWithRelationInput[]
  cursor?: Prisma.ExternalCallWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExternalCallScalarFieldEnum | Prisma.ExternalCallScalarFieldEnum[]
}

/**
 * Lift without action
 */
export type LiftDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lift
   */
  select?: Prisma.LiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lift
   */
  omit?: Prisma.LiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LiftInclude<ExtArgs> | null
}
